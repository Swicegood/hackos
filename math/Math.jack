// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }
        else{
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int i;
        var int pwr;
        var boolean bit;        
        var int sign;
        let sum = 0;
        let i = 0;
        let pwr = 1;
        let sign = 1;
        if(x < 0){
            let sign = -sign;
        }
        if(y < 0){
            let sign = -sign;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);        
        let shiftedX = x;
        while(i < 16){           
            if((pwr & y) > 0){
                let sum = sum + shiftedX;                
            }
            let pwr = (pwr + pwr);
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        if(sign < 0){
            return -sum;
        }
        return sum;
                 
        
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int signx;
        var int signy;
        let signx = 1;
        let signy = 1;
        if(x < 0){
            let signx = -1;
        }
        if(y < 0){
            let signy = -1;
        }
        let x = Math.abs(x);
        let y = Math.abs(y);
        if((y > x) | (y < 0)){
            return 0;
        }
        let q = Math.divide(x, y + y);
        if ((x - ((q + q) * y)) < y){
            return (q + q) * signx * signy;
        }
        else{
            return (q + q + 1) * signx * signy;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y;
        var int j;
        var int i;
        var int twopwr;
        var int twopwry;
        if(x = 0){
            return x;
        }
        if(x = 1){
            return x;
        }
        let j = 7;
        let y = 0;
        while(j > -1){            
            let twopwr = 1;
            let i = j;
            while(i > 0){
                let twopwr = twopwr + twopwr;
                let i = i - 1;
            }
            let twopwry = (y + twopwr)*(y + twopwr);
            if(((twopwry < x) | (twopwry = x)) & (twopwry > 0)){  // if sqare overflows, its greater than the number to be squared 
                let y = y + twopwr;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a>b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a>b){
            return b;
        }
        return a;
    }
}
