// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    field Array str;    
    field int length;
    static String workstr;
    constructor String new(int maxLength) {
        let length = 0;
        if(maxLength = 0){
            return this;
        }
        let str = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let str[length -1] = 0;
        let length = length -1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int target;
        var int pwr10;
        var int len;
        var int i;
        var int z;
        var char c;
        var String numstr;
        let numstr = this;
        let len = length;
        let pwr10 = 1;
        let i = 1;
        let target = 0;
        while((i < len)|(i = len)){
            let z = len - i;
            let c = numstr.charAt(z);
            if((z = 0)&(c = 45)){
                let target = -target;
                return target;
            }
            else{
                let target = target + ((c - 48) * pwr10);
                let pwr10 = pwr10 * 10;
            }
            let i = i + 1;
        }
        return target;


    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var char c;
        var int mod;
        var int i;
        var String workstr;        
        let workstr = this;
        let length = 0;
        let mod = ( val - ((val / 10) * 10));
        let lastDigit = mod;
        if(val < 10){
            do workstr.appendChar(lastDigit + 48);
            return;
        }
        else{
            do workstr.setInt(val /10);
            do workstr.appendChar(lastDigit + 48);
            return;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
